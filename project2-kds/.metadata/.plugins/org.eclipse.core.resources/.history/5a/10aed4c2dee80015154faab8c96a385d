/*
* ***** profiler.c *****
* Diana Southard
* ECEN 5013 Spring 2016
* Project 2
*
* Used to profile memory and pruint32_t functions
*
*/

#include <stdint.h>
#include <stdio.h>
#include "profiler.h"
#include "timer.h"

// Include normal or DMA-adjusted memory header
#ifdef PART3	// defined in main.c
	#include "memoryDMA.h"
#endif

// Include project 1 memory functions
#ifdef PART2_MYFUNCTIONS
	#include"memory.h"
#endif

// Include built-in functions
#ifdef PART2_BUILTIN
	#include <string.h>
#endif


/********************** Memory Testing Functions ********************************/
void testMemory() {
	// Setup test data array
	uint32_t index;
	// Initialize test data array
	for (index = 0; index < MAX_TEST_LENGTH; index++) {
		src[index] = dst[MAX_TEST_LENGTH-index] = index;
	}

	testMemmove();	// All parts will test memmove
#ifdef PART2_MYFUNCTIONS
	testMemzero();
	testReverse();
#endif

#ifdef PART2_BUILTIN
	testMemset();
	testStrcpy();
	testStrncpy();
#endif

#ifdef PART3
	testMemzero();
#endif

	printTestResults();
}

void printTestResults() {
	uint32_t column, row;
	printf ("Printing results: \n");
	for (column = 0; column < MAX_COLUMNS; column++) {
		printf ("Column %d: \t", column);
		for (row = 0; row < MAX_ROWS; row++) {
			printf("%d \t", results[column][row]);
		}
		printf("\n");
	}
	printf ("End of results. \n");
}


void testMemmove() {
	results[MEMMOVE][TEST_RESULT_10] = _testMemove(TEST_LENGTH_10);
	results[MEMMOVE][TEST_RESULT_100] = _testMemove(TEST_LENGTH_100);
	results[MEMMOVE][TEST_RESULT_1000] = _testMemove(TEST_LENGTH_100);
	results[MEMMOVE][TEST_RESULT_5000] = _testMemove(TEST_LENGTH_5000);
}

void testMemzero() {
	results[MEMZERO][TEST_RESULT_10] = _testMemzero(TEST_LENGTH_10);
	results[MEMZERO][TEST_RESULT_100] = _testMemzero(TEST_LENGTH_100);
	results[MEMZERO][TEST_RESULT_1000] = _testMemzero(TEST_LENGTH_100);
	results[MEMZERO][TEST_RESULT_5000] = _testMemzero(TEST_LENGTH_5000);
}

void testReverse() {
	results[REVERSE][TEST_RESULT_10] = _testReverse(TEST_LENGTH_10);
	results[REVERSE][TEST_RESULT_100] = _testReverse(TEST_LENGTH_100);
	results[REVERSE][TEST_RESULT_1000] = _testReverse(TEST_LENGTH_100);
	results[REVERSE][TEST_RESULT_5000] = _testReverse(TEST_LENGTH_5000);
}

void testMemset() {
	results[MEMSET][TEST_RESULT_10] = _testMemset(TEST_LENGTH_10);
	results[MEMSET][TEST_RESULT_100] = _testMemset(TEST_LENGTH_100);
	results[MEMSET][TEST_RESULT_1000] = _testMemset(TEST_LENGTH_100);
	results[MEMSET][TEST_RESULT_5000] = _testMemset(TEST_LENGTH_5000);
}

void testStrcpy(){
	results[STRCPY][TEST_RESULT_10] = _testStrcpy(TEST_LENGTH_10);
	results[STRCPY][TEST_RESULT_100] = _testStrcpy(TEST_LENGTH_100);
	results[STRCPY][TEST_RESULT_1000] = _testStrcpy(TEST_LENGTH_100);
	results[STRCPY][TEST_RESULT_5000] = _testStrcpy(TEST_LENGTH_5000);
}

void testStrncpy() {
	results[STRNCPY][TEST_RESULT_10] = _testStrncpy(TEST_LENGTH_10);
	results[STRNCPY][TEST_RESULT_100] = _testStrncpy(TEST_LENGTH_100);
	results[STRNCPY][TEST_RESULT_1000] = _testStrncpy(TEST_LENGTH_100);
	results[STRNCPY][TEST_RESULT_5000] = _testStrncpy(TEST_LENGTH_5000);
}


/**** Individual function testing, returns the time elapsed as noted by profilerCounter ****/
uint32_t _testMemmove(uint32_t byteLength) {
	uint32_t startTime = profilerCounter;
	memmove(src,dst,byteLength);
	uint32_t endTime = profilerCounter;
	return endTime - startTime;
}

uint32_t _testMemzero(uint32_t byteLength) {
	uint32_t startTime = profilerCounter;
	memzero(src,byteLength);
	uint32_t endTime = profilerCounter;
	return endTime - startTime;
}

uint32_t _testReverse(uint32_t byteLength) {
	uint32_t startTime = profilerCounter;
	reverse(src,byteLength);
	uint32_t endTime = profilerCounter;
	return endTime - startTime;
}

uint32_t _testMemset(uint32_t byteLength) {
	uint32_t startTime = profilerCounter;
	memset(src, 0, byteLength);
	uint32_t endTime = profilerCounter;
	return endTime - startTime;
}

uint32_t _testStrcpy(uint32_t byteLength) {
	// Set the last character in src to be null
	// strcpy copies until a null character
	src[byteLength-1] = '\0';

	uint32_t startTime = profilerCounter;
	strcpy(dst,src);
	uint32_t endTime = profilerCounter;

	// remove null character for future tests
	src[byteLength-1] = 0;

	return endTime - startTime;
}

uint32_t _testStrncpy(uint32_t byteLength) {
	uint32_t startTime = profilerCounter;
	strncpy(dst,src, byteLength);
	uint32_t endTime = profilerCounter;
	return endTime - startTime;
}

/****************** Printf Testing Function Declarations **********************/
void testPrint(){

	/* Cases are as follows:
	 * 1: Some 20 character string
	 * 2: 1 decimal variable, no precision stated
	 * 3: 2 decimal variables, no precision stated
	 * 4: 3 decimal variables, no precision stated
	 * 5: 1 float variable, no precision stated
	 * 6: 2 float variables, no precision stated
	 * 7: 3 float variables, no precision stated
	 * 8: 1 float variable, .2f precision stated
	 * 9: 2 float variables, .2f precision stated
	 * 10: 2 float variables, .2f precision stated
	 * 11: 1 float variables, .8f precision stated
	 * 12: 2 float variables, .8f precision stated
	 * 13: 3 float variables, .8f precision stated
	 */

	// Calculate time elapsed
	printResults[0] = printNoPrecisionD(0,0,0);
	printResults[1] = printNoPrecisionD(PRINT_VAR1,0,0);
	printResults[2] = printNoPrecisionD(PRINT_VAR1,PRINT_VAR2,0);
	printResults[3] = printNoPrecisionD(PRINT_VAR1,PRINT_VAR2,PRINT_VAR3);
	printResults[4] = printNoPrecisionF(PRINT_VAR1,0,0);
	printResults[5] = printNoPrecisionF(PRINT_VAR1,PRINT_VAR2,0);
	printResults[6] = printNoPrecisionF(PRINT_VAR1,PRINT_VAR2,PRINT_VAR3);
	printResults[7] = print2fPrecision(PRINT_VAR1,0,0);
	printResults[8] = print2fPrecision(PRINT_VAR1,PRINT_VAR2,0);
	printResults[9] = print2fPrecision(PRINT_VAR1,PRINT_VAR2,PRINT_VAR3);
	printResults[10] = print8fPrecision(PRINT_VAR1,0,0);
	printResults[11] = print8fPrecision(PRINT_VAR1,PRINT_VAR2,0);
	printResults[12] = print8fPrecision(PRINT_VAR1,PRINT_VAR2,PRINT_VAR3);

	// printout time elapsed
	uint32_t index;
	printf("Printf Test Results: \n");
	for (index = 0; index < PRINT_TEST_CASES; index++) {
		printf("Result %d: %d \n", index, printResults[index]);
	}
}


uint32_t printNoPrecisionD(uint32_t var1, uint32_t var2, uint32_t var3) {
	uint32_t startTime, endTime;
	if (var1 != 0)
		if (var2 != 0)
			if (var3 != 0) {
				startTime = profilerCounter;
				printf("%d, %d, %d", var1, var2, var3);
				endTime = profilerCounter;
			}
			else {
				startTime = profilerCounter;
				printf("%d, %d", var1, var2);
				endTime = profilerCounter;
			}
		else {
			startTime = profilerCounter;
			printf("%d", var1);
			endTime = profilerCounter;
		}
	else {
		startTime = profilerCounter;
		printf(PRINT_STRING);
		endTime = profilerCounter;
	}

	return endTime - startTime;
}

uint32_t printNoPrecisionF(float var1, float var2, float var3) {
	uint32_t startTime, endTime;
	if (var1 != 0)
		if (var2 != 0)
			if (var3 != 0) {
				startTime = profilerCounter;
				printf("%f, %f, %f", var1, var2, var3);
				endTime = profilerCounter;
			}
			else {
				startTime = profilerCounter;
				printf("%f, %f", var1, var2);
				endTime = profilerCounter;
			}
		else {
			startTime = profilerCounter;
			printf("%f", var1);
			endTime = profilerCounter;
		}
	else {
		startTime = profilerCounter;
		printf(PRINT_STRING);
		endTime = profilerCounter;
	}

	return endTime - startTime;
}

uint32_t print2fPrecision(float var1, float var2, float var3) {
	uint32_t startTime, endTime;
	if (var1 != 0)
		if (var2 != 0)
			if (var3 != 0) {
				startTime = profilerCounter;
				printf("%.2f, %.2f, %.2f", var1, var2, var3);
				endTime = profilerCounter;
			}
			else {
				startTime = profilerCounter;
				printf("%.2f, %.2f", var1, var2);
				endTime = profilerCounter;
			}
		else {
			startTime = profilerCounter;
			printf("%.2f", var1);
			endTime = profilerCounter;
		}
	else {
		startTime = profilerCounter;
		printf(PRINT_STRING);
		endTime = profilerCounter;
	}

	return endTime - startTime;
}

uint32_t print8fPrecision(float var1, float var2, float var3) {
	uint32_t startTime, endTime;
	if (var1 != 0)
		if (var2 != 0)
			if (var3 != 0) {
				startTime = profilerCounter;
				printf("%.8f, %.8f, %.8f", var1, var2, var3);
				endTime = profilerCounter;
			}
			else {
				startTime = profilerCounter;
				printf("%.8f, %.8f", var1, var2);
				endTime = profilerCounter;
			}
		else {
			startTime = profilerCounter;
			printf("%.8f", var1);
			endTime = profilerCounter;
		}
	else {
		startTime = profilerCounter;
		printf(PRINT_STRING);
		endTime = profilerCounter;
	}

	return endTime - startTime;
}
